//
//  AddServiceView.swift
//  BeautyBar
//
//  Created by –ò–ª—å—è on 17.09.2021.
//

import SwiftUI
import MapKit


struct AddServiceView: View {
    
    @EnvironmentObject var userInfo: UserInfo
    @Environment(\.presentationMode) var presentationMode
    @State var addService = AddServiceViewModel()
    @State private var showPhotoPicker = false
    
    // Alerts
    @State private var showAddAlert = false
    @State private var showSuccessAlert = false
    @State private var showFailureAlert = false
    
    
    private let color = Color.init(
        red: Double.random(in: 0.1...0.9),
        green: Double.random(in: 0.1...0.9),
        blue: Double.random(in: 0.1...0.9)
    )
    
    var body: some View {
        Form {
            // Photo Picker

                        VStack {
                            Image(uiImage: addService.image)
                                .resizable()
                                .scaledToFit()
                                .frame(
                                    width: UIScreen.main.bounds.width / 2.5,
                                    height: UIScreen.main.bounds.width / 2.5)
                                .background(color)
                                .clipShape(RoundedRectangle(cornerRadius: 20))
                                .shadow(color: color, radius: 10)
                                .padding(10)
                                .onTapGesture {
                                    showPhotoPicker.toggle()
                                }
                            Text("–î–æ–±–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ")
                                .font(.system(size: 20))
                                .fontWeight(.medium)
                        }
                        .padding(.top, 10)
                
            
            .listRowInsets(EdgeInsets())
            .frame(maxWidth: .infinity, maxHeight: .infinity, alignment: .center)
            .background(Color("FormColor"))
            
            // Title, service and city selection
            Section {
                TextField("–ù–∞–∑–≤–∞–Ω–∏–µ", text: $addService.title)
                TextField("–¶–µ–Ω–∞", text: $addService.price)
                    .keyboardType(.numberPad)
                Picker("–£—Å–ª—É–≥–∞", selection: $addService.service) {
                    ForEach(addService.serviceSelection, id: \.self) {
                        Text($0)
                    }
                }
                Picker("–ì–æ—Ä–æ–¥", selection: $addService.city) {
                    ForEach(addService.citySelection, id: \.self) {
                        Text($0)
                    }
                }
            }
            
            // PhoneNumber and email
            Section {
                TextField("–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", text: $addService.phoneNumber)
                    .keyboardType(.numberPad)
                TextField("–ü–æ—á—Ç–∞", text: $addService.email)
            }
            
            // Description
            Section {
                MultilineTextField("–û–ø–∏—Å–∞–Ω–∏–µ", text: $addService.text)
            }
            
            // UIKit alerts with results of publishing service
            if self.showSuccessAlert {
                AlertControlView(showAlert: $showSuccessAlert,
                                 title: "–ü–æ–ª—É—á–∏–ª–æ—Å—å üòé",
                                 message: "–í–∞—à–∞ —É—Å–ª—É–≥–∞ –±—É–¥–µ—Ç –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ —á–µ—Ä–µ–∑ –ø–∞—Ä—É —Å–µ–∫—É–Ω–¥")
            }
            if self.showFailureAlert {
                AlertControlView(showAlert: $showFailureAlert,
                                 title: "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å üò±",
                                 message: "–£ –≤–∞—Å —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–¥–∞–ª–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ")
            }
            
        }
            
        .onAppear(perform: UIApplication.shared.addTapGestureRecognizer)
        .navigationBarTitleDisplayMode(.inline)
        .toolbar {
            addService.isFieldsFilled ?
            Button("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å") {
                self.showAddAlert.toggle() } :
            nil
        }
        // SwiftUI alert
        .alert(isPresented: $showAddAlert) {
            Alert(title: Text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥–∏"),
                  message: Text("–í—ã —É–¥–æ—Å—Ç–æ–≤–µ—Ä–∏–ª–∏—Å—å –≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏ –≤–∞—à–∏—Ö –¥–∞–Ω–Ω—ã—Ö?"),
                  primaryButton: .destructive(Text("–î–∞")) {
                FBFirestore.addService(uid: userInfo.user.uid, image: addService.image, title: addService.title, price: Int(addService.price) ?? 0, service: addService.service, city: addService.city, phoneNumber: addService.phoneNumber, email: addService.email, text: addService.text) { result in
                    switch result {
                    case .success(let int) :
                        if int == 1 {
                            self.showSuccessAlert.toggle()
                        } else {
                            self.showFailureAlert.toggle()
                        }
                    case .failure(let error):
                        print(error.localizedDescription)
                    }
                }
                presentationMode.wrappedValue.dismiss()
            },
                  secondaryButton: .cancel(Text("–ù–µ—Ç"))
            )}
        .sheet(isPresented: $showPhotoPicker) {
            PhotoPicker(selectedImage: $addService.image)
        }
        
    }
            
}

struct AddServiceView_Previews: PreviewProvider {
    static var previews: some View {
        NavigationView {
            AddServiceView()
        }
    }
}
